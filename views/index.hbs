<div id="divModal"></div>
<div class="container" id="divTable">
    <div class="row">
        <div class="col">
            Sensor
        </div>
        <div class="col">
            Temperature
        </div>
        <div class="col">
            Humidity
        </div>
        <div class="col">
            Lux
        </div>
        <div class="col">
            Timestamp
        </div>
    </div>
</div>

<div style="width: 800px; float:left;"><h2>Temperature</h2><canvas id="sensor_temp"></canvas></div>
<div style="width: 800px; float:right;"><h2>Humidity</h2><canvas id="sensor_hum"></canvas></div>
<script src="chart.js/dist/chart.umd.js"></script>
<script>

    const iconX = `<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-x" viewBox="0 0 16 16">
  <path d="M4.646 4.646a.5.5 0 0 1 .708 0L8 7.293l2.646-2.647a.5.5 0 0 1 .708.708L8.707 8l2.647 2.646a.5.5 0 0 1-.708.708L8 8.707l-2.646 2.647a.5.5 0 0 1-.708-.708L7.293 8 4.646 5.354a.5.5 0 0 1 0-.708"/>
</svg>`;

    const iconV = `<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-check" viewBox="0 0 16 16">
  <path d="M10.97 4.97a.75.75 0 0 1 1.07 1.05l-3.99 4.99a.75.75 0 0 1-1.08.02L4.324 8.384a.75.75 0 1 1 1.06-1.06l2.094 2.093 3.473-4.425z"/>
</svg>`;

    const labels = [];
    
    
    const divTable = document.getElementById("divTable");

    (async function(){
        let data = await fetch('/getDataGroupHour');
        data = await data.json();
        data = JSON.parse(data.info)
        console.log({data})

        let temp = [];
        let hum = [];
        let lux = [];
        const color = ['rgb(75, 192, 192)','rgb(255, 192, 192)'];
        const dataTemp = [];
        const dataHum = [];
        const dataLux = [];
        let strTable = "";

        for(const value in data){     
            let date = new Date(data[value].timestamp);
            if (!labels.includes(`${date.getDate()}/${date.getMonth()+1}/${date.getFullYear()} ${date.getHours()}:${date.getMinutes()}:${date.getSeconds()}`))
                labels.push(`${date.getDate()}/${date.getMonth()+1}/${date.getFullYear()} ${date.getHours()}:${date.getMinutes()}:${date.getSeconds()}`);
            temp.push(data[value].AVG_TEMP);
            hum.push(data[value].AVG_HUM);
            lux.push(data[value].AVG_LUX);
            

            if(parseInt(value)+1 == data.length || data[parseInt(value)+1].id_sensor > data[value].id_sensor){
                strTable = `<div class="row"><div class="col">${data[value].id_sensor}</div>`;
                if(data[value].AVG_TEMP > data[value].W_TEMP-1 && data[value].AVG_TEMP < data[value].W_TEMP+1)
                    strTable += '<div class="col">'+iconV+'</div>';
                else 
                    strTable += '<div class="col">'+iconX+'</div>';
                if(data[value].AVG_HUM > data[value].W_HUM-3 && data[value].AVG_HUM < data[value].W_TEMP+3)
                    strTable += '<div class="col">'+iconV+'</div>';
                else 
                    strTable += '<div class="col">'+iconX+'</div>';
                if(data[value].AVG_LUX < data[value].W_LUX)
                    strTable += '<div class="col">'+iconV+'</div>';
                else 
                    strTable += '<div class="col">'+iconX+'</div>';
                let date = new Date(data[value].timestamp);
                strTable += '<div class="col">'+`${date.getDate()}/${date.getMonth()+1}/${date.getFullYear()} ${date.getHours()}:${date.getMinutes()}:${date.getSeconds()}`+'</div>'
                strTable += `</div>`;
                divTable.innerHTML += strTable;
                
                dataTemp.push({
                    label: `Sensor ${data[value].id_sensor}`,
                    data: temp,
                    fill: false,
                    borderColor: color[data[value].id_sensor-1],
                    tension: 0.1
                });
                dataHum.push({
                    label: `Sensor ${data[value].id_sensor}`,
                    data: hum,
                    fill: false,
                    borderColor: color[data[value].id_sensor-1],
                    tension: 0.1
                });
                dataLux.push({
                    label: `Sensor ${data[value].id_sensor}`,
                    data: lux,
                    fill: false,
                    borderColor: color[data[value].id_sensor-1],
                    tension: 0.1
                });
                temp = [];
                hum = [];
                lux = [];
            }

        }
            

        let strModal = '';
       
        
        if(strModal.length != ''){
            document.getElementById('divModal').innerHTML+= `<div class="alert alert-danger" role="alert">Sensor ${sensor}: ${strModal}</div>`;
        }
        
        console.log({dataHum,dataTemp,dataLux,labels})

        new Chart(
            document.getElementById('sensor_temp'),{
            type: 'line',
            data: {
                labels: labels,
                datasets: dataTemp
            }
            }
        );
        new Chart(
            document.getElementById('sensor_hum'),{
            type: 'line',
            data: {
                labels: labels,
                datasets: dataHum
            }
            }
        );
    })();
</script>